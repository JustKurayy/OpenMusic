Create a full-stack Spotify alternative music web application using Node.js (Express) for the backend and React for the frontend. The app should allow users to:

‚∏ª

üéµ Core Features:
	‚Ä¢	Upload and play .mp3 and .wav audio files.
	‚Ä¢	Stream uploaded audio in the browser.
	‚Ä¢	Create, update, delete, and view playlists.
	‚Ä¢	Add or remove songs from playlists.
	‚Ä¢	View and browse their own music library.

‚∏ª

üîê Authentication:
	‚Ä¢	Implement OAuth2 login (e.g., Google OAuth2).
	‚Ä¢	Use JWT (JSON Web Tokens) for secure session handling.
	‚Ä¢	Users should only access their own playlists and media.

‚∏ª

üìÅ Backend (Node.js + Express):
	‚Ä¢	Use Express.js for RESTful API endpoints:
	‚Ä¢	/api/auth for OAuth2 JWT auth flow.
	‚Ä¢	/api/tracks to upload, stream, and list audio files.
	‚Ä¢	/api/playlists to manage playlists.
	‚Ä¢	Use Multer for file uploads and store audio files locally (or stub a cloud option).
	‚Ä¢	Audio metadata (title, duration) is extracted and stored in a database.
	‚Ä¢	Database: Use MongoDB or PostgreSQL.

‚∏ª

üéß Frontend (React):
	‚Ä¢	Use modern React (with Hooks) and React Router.
	‚Ä¢	Clean UI inspired by Spotify:
	‚Ä¢	Sidebar for navigation (Home, Library, Playlists, Upload).
	‚Ä¢	Main area for displaying tracks and playlists.
	‚Ä¢	Top bar with account/login info.
	‚Ä¢	Music player footer (play/pause, skip, volume).
	‚Ä¢	Audio player component with:
	‚Ä¢	Playback controls.
	‚Ä¢	Track progress bar.
	‚Ä¢	Volume control.
	‚Ä¢	Pages:
	‚Ä¢	Home: Recent and popular tracks.
	‚Ä¢	Library: Uploaded songs.
	‚Ä¢	Playlist: User-created playlists and ability to play them.
	‚Ä¢	Upload: Upload .mp3 or .wav tracks.

‚∏ª

üì¶ Additional Features (Optional but Encouraged):
	‚Ä¢	Dark mode toggle (Spotify-style dark theme).
	‚Ä¢	Album art support.
	‚Ä¢	Search functionality (by track name, artist).
	‚Ä¢	Drag and drop reordering in playlists.
	‚Ä¢	Queue system (play next, shuffle).
	‚Ä¢	Mobile responsive layout.

‚∏ª

üõ†Ô∏è Tech Stack:
	‚Ä¢	Frontend: React, React Router, Axios, TailwindCSS or styled-components.
	‚Ä¢	Backend: Node.js, Express.js, Multer, JWT, Passport.js (for OAuth2).
	‚Ä¢	Database: MongoDB or PostgreSQL (with Prisma or Mongoose).
	‚Ä¢	Audio streaming: Use HTML5 <audio> with Blob URLs.

‚∏ª

‚úÖ Deliverables:
	‚Ä¢	Full working app with login, music upload, playback, and playlists.
	‚Ä¢	Source code organized into frontend and backend folders.
	‚Ä¢	.env.example for environment configuration.
	‚Ä¢	README.md with setup instructions.